//
// array_sort.hh for tools
// Made by nicuveo <crucuny@gmail.com>
//

#ifndef TOOLS_PP_ARRAY_SORT_HH_
# define TOOLS_PP_ARRAY_SORT_HH_



//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
// Includes

# include <boost/preprocessor.hpp>



//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
// Declarations

/*
** Sorts the given PP_ARRAY.
** _U variants remove duplicates.
** _D variants use the next available PP_WHILE iteration
** For examples, see unit tests below.
*/

# define TOOLS_PP_ARRAY_SORT(A)     TOOLS_PP_AS_SO(BOOST_PP_WHILE(                  TOOLS_PP_AS_SORT_PRED, TOOLS_PP_AS_SORT_OP,   (0, (0, ()), A)))
# define TOOLS_PP_ARRAY_SORT_U(A)   TOOLS_PP_AS_SO(BOOST_PP_WHILE(                  TOOLS_PP_AS_SORT_PRED, TOOLS_PP_AS_SORT_OP_U, (0, (0, ()), A)))
# define TOOLS_PP_ARRAY_SORT_D(A)   TOOLS_PP_AS_SO(BOOST_PP_CAT(BOOST_PP_WHILE_, D)(TOOLS_PP_AS_SORT_PRED, TOOLS_PP_AS_SORT_OP,   (0, (0, ()), A)))
# define TOOLS_PP_ARRAY_SORT_U_D(A) TOOLS_PP_AS_SO(BOOST_PP_CAT(BOOST_PP_WHILE_, D)(TOOLS_PP_AS_SORT_PRED, TOOLS_PP_AS_SORT_OP_U, (0, (0, ()), A)))



//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
// Workarounds

/*
** Boost 1.49.0 lacks BOOST_PP_TUPLE_REM_0.
** PP_ARRAY_INSERT documentation examples do not work...
*/

# ifndef BOOST_PP_TUPLE_REM_0
#  define BOOST_PP_TUPLE_REM_0()
# endif



//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
// Implementation

# define TOOLS_PP_AS_ZERO_2(_1, _2) 0

# define TOOLS_PP_AS_MI(T) BOOST_PP_TUPLE_ELEM(3, 0, T)
# define TOOLS_PP_AS_MD(T) BOOST_PP_TUPLE_ELEM(3, 1, T)
# define TOOLS_PP_AS_MA(T) BOOST_PP_TUPLE_ELEM(3, 2, T)

# define TOOLS_PP_AS_SI(T) BOOST_PP_TUPLE_ELEM(3, 0, T)
# define TOOLS_PP_AS_SO(T) BOOST_PP_TUPLE_ELEM(3, 1, T)
# define TOOLS_PP_AS_SA(T) BOOST_PP_TUPLE_ELEM(3, 2, T)

# define TOOLS_PP_AS_MERGE_A(I, A) BOOST_PP_IF(BOOST_PP_LESS(I, BOOST_PP_ARRAY_SIZE(A)), BOOST_PP_ARRAY_ELEM, TOOLS_PP_AS_ZERO_2)(I, A)
# define TOOLS_PP_AS_MERGE_I(S) TOOLS_PP_AS_MERGE_A(TOOLS_PP_AS_MI(S), TOOLS_PP_AS_MA(S))
# define TOOLS_PP_AS_MERGE_OP(D, S) (BOOST_PP_INC(TOOLS_PP_AS_MI(S)), TOOLS_PP_AS_MD(S), TOOLS_PP_AS_MA(S))
# define TOOLS_PP_AS_MERGE_PRED(D, S) BOOST_PP_AND(BOOST_PP_LESS(TOOLS_PP_AS_MI(S), BOOST_PP_ARRAY_SIZE(TOOLS_PP_AS_MA(S))), BOOST_PP_LESS(TOOLS_PP_AS_MERGE_I(S), TOOLS_PP_AS_MD(S)))
# define TOOLS_PP_AS_MERGE_INDEX(I, A)      TOOLS_PP_AS_MI(BOOST_PP_WHILE(                  TOOLS_PP_AS_MERGE_PRED, TOOLS_PP_AS_MERGE_OP, (0, I, A)))
# define TOOLS_PP_AS_MERGE_INDEX_D(D, I, A) TOOLS_PP_AS_MI(BOOST_PP_CAT(BOOST_PP_WHILE_, D)(TOOLS_PP_AS_MERGE_PRED, TOOLS_PP_AS_MERGE_OP, (0, I, A)))

# define TOOLS_PP_AS_MERGE_UR(     OA, LI, II) BOOST_PP_IF(BOOST_PP_LESS(LI, BOOST_PP_ARRAY_ELEM(II, OA)), TOOLS_PP_AS_MERGE(     OA, LI, II), OA)
# define TOOLS_PP_AS_MERGE_UR_D(D, OA, LI, II) BOOST_PP_IF(BOOST_PP_LESS(LI, BOOST_PP_ARRAY_ELEM(II, OA)), TOOLS_PP_AS_MERGE_D(D, OA, LI, II), OA)
# define TOOLS_PP_AS_MERGE(     OA, LI, II) BOOST_PP_ARRAY_INSERT(     OA, II, LI)
# define TOOLS_PP_AS_MERGE_D(D, OA, LI, II) BOOST_PP_ARRAY_INSERT_D(D, OA, II, LI)
# define TOOLS_PP_AS_MERGE_U(     OA, LI, II) BOOST_PP_IF(BOOST_PP_LESS(II, BOOST_PP_ARRAY_SIZE(OA)), TOOLS_PP_AS_MERGE_UR,   TOOLS_PP_AS_MERGE  )(   OA, LI, II)
# define TOOLS_PP_AS_MERGE_U_D(D, OA, LI, II) BOOST_PP_IF(BOOST_PP_LESS(II, BOOST_PP_ARRAY_SIZE(OA)), TOOLS_PP_AS_MERGE_UR_D, TOOLS_PP_AS_MERGE_D)(D, OA, LI, II)

# define TOOLS_PP_AS_SORT_MERGE(D, I, O, A)   TOOLS_PP_AS_MERGE(  O, BOOST_PP_ARRAY_ELEM(I, A), TOOLS_PP_AS_MERGE_INDEX_D(D, BOOST_PP_ARRAY_ELEM(I, A), O))
# define TOOLS_PP_AS_SORT_MERGE_U(D, I, O, A) TOOLS_PP_AS_MERGE_U(O, BOOST_PP_ARRAY_ELEM(I, A), TOOLS_PP_AS_MERGE_INDEX_D(D, BOOST_PP_ARRAY_ELEM(I, A), O))

# define TOOLS_PP_AS_SORT_PRED(D, S) BOOST_PP_LESS(TOOLS_PP_AS_SI(S), BOOST_PP_ARRAY_SIZE(TOOLS_PP_AS_SA(S)))
# define TOOLS_PP_AS_SORT_OP(D, S)   (BOOST_PP_INC(TOOLS_PP_AS_SI(S)), TOOLS_PP_AS_SORT_MERGE  (D, TOOLS_PP_AS_SI(S), TOOLS_PP_AS_SO(S), TOOLS_PP_AS_SA(S)), TOOLS_PP_AS_MA(S))
# define TOOLS_PP_AS_SORT_OP_U(D, S) (BOOST_PP_INC(TOOLS_PP_AS_SI(S)), TOOLS_PP_AS_SORT_MERGE_U(D, TOOLS_PP_AS_SI(S), TOOLS_PP_AS_SO(S), TOOLS_PP_AS_SA(S)), TOOLS_PP_AS_MA(S))



//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
// Unit tests

# if TOOLS_PP_UNIT_TESTS

#  define TEST_0 ( 1, (1))
#  define TEST_1 ( 2, (1, 2))
#  define TEST_2 ( 2, (2, 1))
#  define TEST_3 ( 2, (2, 2))
#  define TEST_4 (12, (2, 1, 1, 4, 3, 5, 12, 6, 0, 4, 5, 3))
#  define TEST_5 (0, ())

TOOLS_PP_ARRAY_SORT(TEST_0)   // (1, (1))
TOOLS_PP_ARRAY_SORT(TEST_1)   // (2, (1, 2))
TOOLS_PP_ARRAY_SORT(TEST_2)   // (2, (1, 2))
TOOLS_PP_ARRAY_SORT(TEST_3)   // (2, (2, 2))
TOOLS_PP_ARRAY_SORT(TEST_4)   // (12, (0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 12))
TOOLS_PP_ARRAY_SORT(TEST_5)   // (0, ())
TOOLS_PP_ARRAY_SORT_U(TEST_0) // (1, (1))
TOOLS_PP_ARRAY_SORT_U(TEST_1) // (2, (1, 2))
TOOLS_PP_ARRAY_SORT_U(TEST_2) // (2, (1, 2))
TOOLS_PP_ARRAY_SORT_U(TEST_3) // (1, (2))
TOOLS_PP_ARRAY_SORT_U(TEST_4) // (8, (0, 1, 2, 3, 4, 5, 6, 12))
TOOLS_PP_ARRAY_SORT_U(TEST_5) // (0, ())

# endif



#endif /* !TOOLS_PP_ARRAY_SORT_HH_ */
